{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>AIGraph4pg is a tutorial and reference application, implemented with Azure Database for PostgreSQL, for both Graph and AI use-cases. It is an open-source project that customers can learn from, and possibly model their projects based on the provided codebase.</p> <p>This reference application demonstrates the use of several PostgreSQL extensions including Apache AGE, pgvector, and azure_ai to implement the graph and AI functionality. Apache AGE uses the openCypher graph query language, similar to Neo4j.</p> <p>Azure OpenAI is used in this application for embeddings generation for vector search, as well as for generative-AI of openCypher queries.</p> <p>This GitHub repository application contains a curated dataset of USA Legal Cases primarily in Washington state.  The dataset nicely demonstrates vector search functionality (i.e. - case descriptions) as well as graph use cases (i.e. - case citations). This dataset is pre-vectorized as the necessary embeddings have already been created by invoking Azure OpenAI.</p> <p>The curated dataset is used to load one relational table named legal_cases, which contains both embeddings/vector data as well as interesting JSONB data. The dataset also contains a zipped file that can be used to load the corresponding Apache AGE graph, also named \"legal_cases\".</p> <p>This application is implemented in Python, and also uses the psql command-line tool.  Users of this application are expected to have some familiarity with these tools, and have them installed in on their  Windows 11 or macOS workstations/laptops.  Setup and use of these are described elsewhere in the docs.</p> <p>This reference application uses your instance of Azure Database for PostgreSQL, and includes a web application UI that is intended to run on your  workstation or laptop.  The web app can be executed locally either as a Python process or as a public Docker image available on DockerHub. Some console app functionality is also available in Python file main.py.</p> <p>Each page in the web application demonstrates specific topics (i.e. - Administrative queries, SQL queries, SQL JSONB queries, Graph queries, Vector Search, etc.).  Each page contains a Library icon that can be clicked to display context-sensitive tutorial content on that topic. You can then click the Library icon again to return to the functional non-tutorial page.</p> <p>These topics are presented in a left-to-right manner in the Top Navigation area of each page, with each topic building on the previous page.</p> <p>The following image shows this Top Navigation UI, along with the Library icon.</p> <p> </p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#documentation-links","title":"Documentation Links","text":"<p>This reference implemention is primarily built upon the Azure PaaS services and open-source software listed below:</p> <ul> <li>Azure Database for PostgreSQL - Flexible Server</li> <li>Apache AGE Graph Database</li> <li>openCypher language</li> <li>Azure OpenAI</li> <li>Python   and software libraries hosted a the   The Python Package Index (PyPI)</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>The context-sensitive tutorial content is embedded into the web application that runs locally on your workstation/laptop. See it by clicking the books icon on the Top-Nav.</p> <p>The Frequently Asked Questions (FAQ) page may answer some of your questions about Azure PostgreSQL and this reference application.</p>"},{"location":"#directory-structure-of-this-github-repository","title":"Directory Structure of this GitHub Repository","text":"<pre><code>Directory/File             Description\n\n\u251c\u2500\u2500 az                     az CLI deployment script for Azure PostgreSQL\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 legal_cases        Zipped curated dataset files for both relational and graph data\n\u251c\u2500\u2500 docs                   User documentation\n\u2514\u2500\u2500 python                 The Python-based implementation\n    \u251c\u2500\u2500 config             Contains file sample_queries.txt, used by the Web UI\n    \u251c\u2500\u2500 sql                Miscellaneous SQL, DDL, indexing scripts\n    \u251c\u2500\u2500 src                The primary Python source code\n    \u251c\u2500\u2500 static             Static assets used in the Web app\n    \u251c\u2500\u2500 templates          Jinja2 templates used in text generation\n    \u251c\u2500\u2500 tests              Unit tests\n    \u251c\u2500\u2500 views              Web app HTML views/templates, including tutorial_&lt;topic&gt;.html pages\n    \u251c\u2500\u2500 main.py            The \"console app\" part of this application\n    \u251c\u2500\u2500 requirements.in    The base list of Python requirements, used by venv.ps1/venv.sh\n    \u251c\u2500\u2500 venv.ps1           Windows PowerShell script to create the Python virtual environment\n    \u251c\u2500\u2500 venv.sh            Linux/macOS script to create the Python virtual environment\n    \u251c\u2500\u2500 webapp.py          The Web application, built with the FastAPI framework\n    \u251c\u2500\u2500 webapp.ps1         Windows PowerShell script to start the Web app\n    \u2514\u2500\u2500 webapp.sh          Linux/macOS script to start the Web app\n</code></pre>"},{"location":"faq/","title":"AIGraph4pg : Frequently Asked Questions (FAQ)","text":"<p>This page addresses some of the Frequently Asked Questions about the AIGraph4pg solution.  It will be updated in an ongoing manner to address common customer questions.</p>"},{"location":"faq/#list-of-questions","title":"List of Questions","text":"<ul> <li>What is Azure PostgreSQL Flex Server?</li> <li>What is Apache AGE?</li> <li>This repo uses Python, is Python required?</li> </ul>"},{"location":"faq/#answers","title":"Answers","text":"<p>Q: What is Azure PostgreSQL Flex Server?</p> <p>A: Azure Database for PostgreSQL - Flexible Server is a relational database service based on the open-source Postgres database engine. It's a fully managed database-as-a-service that can handle mission-critical workloads with predictable performance, security, high availability, and dynamic scalability.</p> <ul> <li>Introduction</li> <li>Documentation</li> </ul> <p>Throughout this GitHub repo, the product name may often be referred to as simply Azure PostgreSQL.</p> <p></p> <p>Q: What is Apache AGE?</p> <p>A: Apache AGE is a PostgreSQL extension that provides graph database functionality. The graph query language that AGE uses is openCypher. The AGE extension is now supported in Azure PostgreSQL Flex Server, thus enabling  GraphRAG, OmniRAG, and AI-powered applications.</p> <ul> <li>AGE Home Page</li> <li>Introducing support for Graph data in Azure Database for PostgreSQL</li> </ul> <p></p> <p>Q: This repo uses Python, is Python required?</p> <p>A: This reference implementation was developed with the Python programming language, but Python isn't required for your implementation.</p> <p>There are PostgreSQL driver libraries in multiple programming languages such as Java, C#, Node.js/TypeScript, Ruby, Go, R, and others. Your solution can be built with your choice of a programming language that supports PostgreSQL.</p>"},{"location":"tutorial_architecture/","title":"AIGraph4pg Tutorial : Solution Architecture and Implementation","text":""},{"location":"tutorial_architecture/#implementation-language-python","title":"Implementation Language: Python","text":"<p>This reference implementation was developed with the Python programming language, but Python isn't required for your implementation. There are PostgreSQL driver libraries in multiple programming languages such as Java, C#, Node.js/TypeScript, Ruby, Go, R, and others. Your solution can be built with your choice of a programming language that supports PostgreSQL. The complete list of PostgreSQL drivers is listed here.This Python implementation makes use of the following primary libraries, which are available at the Python Package Index (PyPI).</p> <ul> <li>psycopg   PostgreSQL driver supporting both Synchronous and Asynchronous calls</li> <li>fastapi   Modern Asynchronous Web Framework</li> <li>openai   Provides convenient access to the Azure OpenAI REST API</li> <li>ageqrp   Small library used to parse the results of Apache AGE queries with psycopg</li> <li>hypercorn   Web server which runs your fastapi python module</li> </ul> <p>So as to focus on the PostgreSQL and Apache AGE aspects of the solution, the codebase intentionally doesn't use an Object-Relational Manager (ORM) such as SQLAlchemy. You are free, of course, to use any programming language and set of libraries for your implementation.</p>"},{"location":"tutorial_architecture/#graph-visualization-d3js","title":"Graph Visualization: D3.js","text":"<p>This reference implementation uses the free and open-source D3.js JavaScript library. With D3.js you can create beautiful and interactive visualizations of your Apache AGE graph data.Other open-source and proprietary graph visualization libraries are available. Cytoscape is one of the best alternatives to D3.js.</p>"},{"location":"tutorial_architecture/#development-environment","title":"Development Environment","text":"<p>This solution was developed with the following recommended development tools:</p> <ul> <li>Visual Studio Code (VSC)   VSC is a lightweight yet extensible and full featured text editor and   Integrated Development Environment (IDE).   It is produced by Microsoft and free of charge.   It is available for Windows, Linux, and MacOS.</li> <li>GitHub Copilot   AI-assisted code completion tool that works with VSC.</li> <li>psql   A terminal-based front-end to PostgreSQL.   You can execute psql from within Windows PowerShell or Linux/macOS terminal   to interact with your Azure PostgreSQL database.</li> <li>Docker Desktop   and Docker Compose   are recommended tools for creating and testing container-based applications.   The use of these tools, however, is not further discussed in this tutorial   as they aren't necessary to execute the solution from your development computer.   See the Deployment Environment section, below, that lists two execellent Azure PaaS   services where your Docker containers can be deployed to.</li> </ul>"},{"location":"tutorial_architecture/#deployment-environment","title":"Deployment Environment","text":"<p>The following Azure Platform as a Service (PaaS) services are required for this solution:</p> <ul> <li>Azure Database for PostgreSQL - Flexible Server   Azure Database for PostgreSQL is a fully managed database service that provides   Enterprise functionality over open-source PostgreSQL.   The PostgreSQL open ecosystem supports extensions to the database;   this is one of the compelling features of PostgreSQL. For example, the   postgis extension supports GPS and spatial applications whilepg_cron supports job schedling similar to linux.This reference implementation uses the following extensions:</li> <li>age     Apache AGE project for graph database functionality with openCypher.</li> <li>vector     Standard vector search functionality (but not DiskANN vector search)</li> <li>azure_ai     Provides Azure AI and ML Services integration for PostgreSQL.See the complete list   of supported extensions for Azure Database for PostgreSQL.This reference implementation uses one relational table, named legal_cases,   which has the following structure as shown in the following psql output.   Note that there is a jsonb column as well as a   vector(1536) for the embeddings generated by the Azure OpenAI   text-embedding-ada-002 model described later on this page.   <pre><code>dev=&gt; \\d legal_cases\nTable \"public.legal_cases\"\nColumn              |          Type           | Collation | Nullable |                 Default\n--------------------+-------------------------+-----------+----------+-----------------------------------------\n  id                | bigint                  |           | not null | nextval('legal_cases_id_seq'::regclass)\n  name              | character varying(1024) |           |          |\n  name_abbreviation | character varying(1024) |           |          |\n  case_url          | character varying(1024) |           |          |\n  decision_date     | date                    |           |          |\n  court_name        | character varying(1024) |           |          |\n  citation_count    | integer                 |           |          |\n  text_data         | text                    |           |          |\n  json_data         | jsonb                   |           |          |\n  embedding         | vector(1536)            |           |          |\nIndexes:\n  \"legal_cases_pkey\" PRIMARY KEY, btree (id)\n  \"idx_legal_cases_citation_count\" btree (citation_count)\n  \"idx_legal_cases_court_name\" btree (court_name)\n  \"idx_legal_cases_decision_date\" btree (decision_date)\n  \"idx_legal_cases_ivfflat_embedding\" ivfflat (embedding vector_cosine_ops) WITH (lists='50')\n  \"idx_legal_cases_json_data_gin\" gin (json_data)\n  \"idx_legal_cases_name_abbreviation\" btree (name_abbreviation)\n</code></pre>   This reference implementation also uses one Apache AGE graph,   which is also named legal_cases. This name does not have to   correspond to the above relational table name, as they are two distinct objects   in PostgreSQL. They are populated separately.The graph is described in the Graph Queries page of this application.</li> <li>Azure OpenAI   PaaS service to access and invoke, via a Python library, the Artificial Intelligence (AI)   models implemented by OpenAI.   Witnin your Azure OpenAI service, these two model deployments are required:</li> <li>text-embedding-ada-002     Used for generating embeddings from text input.     In the case of this model the embedding values contain 1,536 dimensions,     meaning that each embedding is an array of 1,536 floating point numbers     which capture the semantic meaning of the given text.     The embeddings are used in vector search to search the     database for rows with similar semantic meaning to the given vector or embedding.</li> <li>gpt-4o     This model is used in this reference application for Generative AI     to generate openCypher queries from natural language.     This GenAI functionality is currently under development in this repo.</li> <li>Azure Machine Learning (AML)   Enterprise-grade AI PaaS service for the end-to-end machine learning (ML) lifecycle   including model deployments.   AML is not yet used by this reference implementation, as   semantic ranking   of vector search results is not yet implemented in this repo.</li> <li>Either Azure Container Apps (ACA)   or Azure Kubernetes Service (AKS)   are recommended for hosting your deployed web application   Docker containers in Azure.You will use a Azure Container Registry (ACR)   to store your Docker images for deployment to ACA or AKS.   Likewise, in an Azure deployment, you should use an Azure Key Vault (AKV)   to store your secrets and connection strings.Deployment of the web application, however, is out-of-scope for this reference implementation   as the web app is intended to run from your development computer.   Thus, ACA, AKS, ACR, and AKV are not used in this reference implementation.</li> </ul>"},{"location":"tutorial_graph/","title":"Tutorial graph","text":""},{"location":"tutorial_graph/#aigraph4pg-tutorial-graphs-apache-age-and-opencypher","title":"AIGraph4pg Tutorial : Graphs, Apache AGE, and openCypher","text":""},{"location":"tutorial_graph/#graph-terminology","title":"Graph Terminology","text":"<p>There are several types of graph databases. One of the most common is called Labeled Property Graph or LPG.With LPG graphs, you compose the graph of nodes and edges.Nodes represent the entities in the graph, and the Edges represent the relationships between the nodes or entities. Nodes are alternatively called Vertices. Nodes and Edges can have an arbitrary set of properties which are key-value data pairs.These relationships or edges are \"first class citizens\" within graph databases, and the relationships are often more important than the nodes themselves. While relational databases offer foreign key constraints, the edges in a graph database are more nuanced and expressive.</p> <p>Definitions:</p> <ul> <li>Graph : A collection of nodes and edges</li> <li>Node : An entity or vertex in a graph</li> <li>Edge : A named connection between two nodes</li> <li>Property : Key-value pair associated with a node or edge</li> <li>Label : A tag attached to a node or edge, such as \"Case\" in the following diagram</li> </ul> <p></p> <p>In the above visualization, the Nodes are represented as named circles while the Edges are represented as named lines.The edges are directed and don't imply or require a reverse relationship. For example, in this model, there is a Case -&gt; tried_in -&gt; Jurisdiction relationship but no corresponding relationship from Jurisdiction to Case.With LGP graphs there is no explicit schema that you have to define. The schema is implicitly created as you add your Nodes and Edges.Note that the graph implemented in this reference application only contains Case Nodes and cites and cited_by Edges. Note Judges, Jurisdictions, and other edge types.</p>"},{"location":"tutorial_graph/#opencypher","title":"openCypher","text":"<p>openCypher is the query language used by Apache AGE. Per the opencypher.org website:  </p> <p>openCypher is an open source specification of Cypher\u00ae - the most widely adopted query language for property graph databases. Cypher was developed by Neo4j\u00ae. The openCypher syntax is well documented here in a 200+ page PDF document. It is recommended that you download this PDF and keep it as a handy reference.The following is an example openCypher to find a specific Case node: <pre><code>  MATCH (c:Case {id:594079}) RETURN c\n</code></pre> In this example, \"Case\" is the type of Node, and we're searching for the Case with the \"id\" property equal to 594079. The \"c:\" part indicates that we're assigning the Case node to the variable \"c\", then the query RETURNs the \"c\" variable.Now, when we execute this same query in Apache AGE, we wrapper the openCypher query with a SQL query that looks like the following: <pre><code>    select * from ag_catalog.cypher('legal_cases',\n      $$ MATCH (c:Case {id:594079}) RETURN c $$)\n    as (c agtype);\n</code></pre> This SQL invokes the \"cypher\" function in the Apache AGE \"ag_catalog\" schema, and provides the name of the graph to be queried (i.e. - \"legal_cases\"). The return variable c is cast to the \"agtype\" data type of Apache AGE, which is its' standard return type. <pre><code>    select * from ag_catalog.cypher('legal_cases',\n      $$ MATCH (c:Case {id:594079}) RETURN c $$)\n    as (c agtype);\n</code></pre> Before that query is executed, you'll need to add the Apache AGE schema (i.e. - ag_catalog) to your schema search path, as shown below in a psql session. <pre><code>    dev=&gt; SET search_path TO public, ag_catalog, legal_cases;\n</code></pre> In this example, the search path is set to the public schema first, followed by age, followed by your specific graph schema (i.e. - legal_cases). See the official PostgreSQL documentation on Schemas and the search_path.Alternatively, the alter user command can be used to set the search path for a specific user, as shown below: <pre><code>    dev=&gt; alter user  set search_path='public','ag_catalog';\n</code></pre></p>"},{"location":"tutorial_graph/#creating-and-loading-an-age-graph","title":"Creating and Loading an AGE Graph","text":"<p>Please revisit the docs\\readme.md page of the GitHub repository where this process is documented.This section further explains the process.There are multiple ways to load an Apache AGE graph in Azure PostgreSQL. One way by using the psql command line utility to redirect in a set of SQL statements that load the Nodes and Edges; this is the approach used in the docs\\readme.md page.The Microsoft Azure PostgreSQL team is currently working on a high-speed data loader utility for Apache AGE graphs. This will be used and documented in this reference application once it becomes available.Currently, this reference application loads the graph with this command that invokes psql: <pre><code>    .\\pg.ps1 flex dev ..\\data\\legal_cases\\age_load_statments.sql\n</code></pre> The data in file age_load_statments.sql contains three lines that look like the following. The first line creates a Case Node, the next line creates a \"cites\" edge, and the third libe creates an \"cited_by\" edge. These three lines have been reformatted for readability here. <pre><code>    SELECT * FROM cypher('legal_cases',\n      $$ CREATE (:Case { id: 594079, url: 'https://static.case.law/wash/79/cases/0643-01.json', name: 'Martindale Clothing Co. v. Spokane &amp; Eastern Trust Co.', court_id: 9029, court: 'Washington Supreme Court', decision_year: 1914, citation_count: 5 }) $$)\n    as (v agtype);\n\n    SELECT * FROM cypher('legal_cases',\n      $$ MATCH (a:Case), (b:Case) WHERE a.id = 1017660 AND b.id = 594079\n         CREATE (a)-[e:cites  {case_id: '1017660',  cited_case_id: '594079',  case_name: 'United Mutual Savings Bank v. Riebli',  cited_case_name: 'Martindale Clothing Co. v. Spokane &amp; Eastern Trust Co.',  cited_case_year: 1914 }]-&gt;(b) RETURN e $$)\n    as (e agtype);\n\n    SELECT * FROM cypher('legal_cases',\n      $$ MATCH (a:Case), (b:Case) WHERE a.id = 594079 AND b.id = 1017660\n         CREATE (a)-[e:cited_by  {case_id: '594079',  cited_case_id: '1017660',  case_name: 'Martindale Clothing Co. v. Spokane &amp; Eastern Trust Co.',  cited_case_name: 'United Mutual Savings Bank v. Riebli',  cited_case_year: 1960 }]-&gt;(b) RETURN e $$)\n      as (e agtype);\n</code></pre> In the first line, notice how the new Case Node contains an arbitrary set of properties in JSON format. This is schemaless in nature.The next two lines create Edges that are associated with this Case 594079. Notice how the two Nodes are first located with the MATCH clause, and the Edge is then CREATEd between the MATCHed Nodes. Notice that Edges also may be created with an arbitrary set of properties in JSON format.</p>"},{"location":"tutorial_graph/#the-underlying-apache-age-data-structures","title":"The Underlying Apache AGE Data Structures","text":"<p>You can use the PostgreSQL pg_dump utility, with the --schema-only option to dump the schema of your database to gain insight into how the AGE graph is stored in the database. The output will be similar to the following: <pre><code>    CREATE TABLE legal_cases._ag_label_vertex (\n      id ag_catalog.graphid NOT NULL,\n      properties ag_catalog.agtype DEFAULT ag_catalog.agtype_build_map() NOT NULL\n    );\n\n    CREATE TABLE legal_cases._ag_label_edge (\n      id ag_catalog.graphid NOT NULL,\n      start_id ag_catalog.graphid NOT NULL,\n      end_id ag_catalog.graphid NOT NULL,\n      properties ag_catalog.agtype DEFAULT ag_catalog.agtype_build_map() NOT NULL\n    );\n\n    CREATE TABLE legal_cases.\"Case\" ()\n    INHERITS (legal_cases._ag_label_vertex);\n\n    CREATE TABLE legal_cases.cited_by ()\n    INHERITS (legal_cases._ag_label_edge);\n\n    CREATE TABLE legal_cases.cites ()\n    INHERITS (legal_cases._ag_label_edge);\n</code></pre> In this case the name of the graph is \"legal_cases\", and it is in its own schema.Apache AGE creates two superclass tables for each graph, one for all Nodes and one for all Edges (i.e. - _ag_label_vertex and _ag_label_edge).Then, AGE uses the INHERITS clause to create one table for each Node type and one table for each and Edge type in your graph.</p>"},{"location":"tutorial_graph/#interacting-with-your-age-graph-in-azure-postgresql","title":"Interacting with your AGE graph in Azure PostgreSQL","text":"<p>To execute CRUD operations vs AGE you simply use the tools and software libraries that you already use with PostgreSQL.For example, the psql command line utility, the pgAdmin GUI, or a software library like psycopg2 for Python.See the post_query method in webapp.py in the repo for an example of how to use psycopg_pool to interact with AGE in an asynchronous manner.</p>"},{"location":"tutorial_opencypher_gen/","title":"Tutorial opencypher gen","text":""},{"location":"tutorial_opencypher_gen/#aigraph4pg-tutorial-generative-ai-for-opencypher","title":"AIGraph4pg Tutorial : Generative AI for openCypher","text":""},{"location":"tutorial_opencypher_gen/#generative-ai","title":"Generative AI","text":"<p>This reference application makes use of Generative AI to generate openCypher and AGE SQL queries from natural language queries provided by the user.This functionality enables the new class of GraphRAG and OmniRAG applications.RAG is the acronym for Retrieval-augmented generation. It is a pattern used in Generative AI applications whereby you pass data to a Large Language Model (LLM) to augment the knowledge base of the model so that it can generate more accurate output for you.Both the RAG data, and the user natural-language question, are passed to the LLM in the form of a prompt. The prompt is typically text content, and gives specific instructions to the LLM on how to generate the desired output.Generative AI applications are much more effective if they can pass the highest-quality and most pertinent RAG data to the LLM. Initial RAG applications typically solely used vector search to obtain their RAG data. While vector search is very effective in some cases, it falls short in others. The GraphRAG pattern is used to obtain the RAG data either from a vector search or from a graph database query. Graph databases, such as Apache AGE in Azure Postgresql can be used to implement knowledge graphs that can be very effective in providing RAG data.The OmniRAG pattern takes this concept one step further by allowing the application to obtain RAG data from an arbitrary n-number of data sources. Azure PostgreSQL is well-suited for both GraphRAG and OmniRAG applications. For example, Azure PostgreSQL supports the postgres_fdw extension to connect to other (i.e. - \"foreign\") PostgreSQL databases.</p>"},{"location":"tutorial_opencypher_gen/#generative-ai-implementation-in-this-reference-application","title":"Generative AI Implementation in this Reference Application","text":"<p>To generate the openCypher and AGE SQL queries from the user natural language, this reference application calles the Azure OpenAI service in two steps. Step one is to generate an openCypher query from the user natural language. Step two is to wrap the generated openCypher query in an AGE SQL query. The LLM used here is a deployment of the Azure OpenAI gpt-4o model. The LLM is invoked via the openai python library; see file \"python/src/services/ai_service.py\" in the repository source code for details.The prompt for the first LLM step looks like this: <pre><code>You are a helpful agent designed to generate an openCypher graph query\ngiven a graph schema and a user natural language question.\n\n## Graph Schema:\n\nThe following describes the schema of the legal_cases graph database:\n\nThe graph has one node type: Case.\n\nA sample Case node with its attributes and datatypes is shown as JSON below.\n\n{\n    \"id\": 844424930133136,\n    \"label\": \"Case\",\n    \"properties\": {\n        \"id\": 594079,\n        \"url\": \"https://static.case.law/wash/79/cases/0643-01.json\",\n        \"name\": \"Martindale Clothing Co. v. Spokane &amp; Eastern Trust Co.\",\n        \"court\": \"Washington Supreme Court\",\n        \"court_id\": 9029,\n        \"decision_year\": 1914,\n        \"citation_count\": 5\n    }\n}\n\nThere are two possible Edges between Case Nodes; \"cites\" and \"cited_by\".\n\nA sample \"cites\" Edge with its attributes and datatypes is shown as JSON below.\n\n{\n    \"id\": 1407374883553314,\n    \"label\": \"cites\",\n    \"end_id\": 844424930131969,\n    \"start_id\": 844424930131976,\n    \"properties\": {\n      \"case_id\": \"1005793\",\n      \"case_name\": \"Traverso v. Pupo\",\n      \"cited_case_id\": \"1002109\",\n      \"cited_case_name\": \"Cline v. Department of Labor &amp; Industries\",\n      \"cited_case_year\": 1957\n    }\n}\n\nA sample \"cited_by\" Edge with its attributes and datatypes is shown as JSON below.\n\n{\n    \"id\": 1125899906842625,\n    \"label\": \"cited_by\",\n    \"end_id\": 844424930131976,\n    \"start_id\": 844424930131969,\n    \"properties\": {\n        \"case_id\": \"1002109\",\n        \"case_name\": \"Cline v. Department of Labor &amp; Industries\",\n        \"cited_case_id\": \"1005793\",\n        \"cited_case_name\": \"Traverso v. Pupo\",\n        \"cited_case_year\": 1957\n    }\n}\n\n## Natural Language:\n\nThe user has asked the following natural language question:\n&lt;&lt; natural_language &gt;&gt;\n\n## Result Format:\n\nOnly return the text of the openCypher query.\n\nPlease generate the openCypher query for the given natural language question\nand given the schema.\n\n## Examples:\n\nExample 1:\nnatural_language input:  Lookup Case id 594079\nopenCypher query output: MATCH (c:Case {id:594079}) RETURN c \n\nExample 2:\nnatural_language input:  Traverse the cites edges from Case id 594079 to a depth of two cases. Return the Edge pairs.\nopenCypher query output: MATCH (c1:Case {id:594079})-[r1:cites]-&gt;(c2:Case)-[r2:cites]-&gt;() RETURN r1, r2\n</code></pre> The prompt for the second LLM step looks like this: <pre><code>You are a helpful agent designed to generate Apache AGE SQL from \na given graphName and openCypher query.\n\nYou should wrap the SQL around the openCypher query.\n\n## Inputs:\n\ngraphName: &lt;&lt; graph_name &gt;&gt;\n\nopenCypher: &lt;&lt; open_cypher &gt;&gt;\n\n## Result Format:\n\nOnly return the text of the Apache AGE SQL.\n\n## Examples:\n\nExample 1:\ngraphName:   legal_cases\nopenCypher:  MATCH (c:Case {id:594079}) RETURN c \nAGE SQL:     select * from ag_catalog.cypher('legal_cases', $$ MATCH (c:Case {id:594079}) RETURN c $$) as (c agtype);\n\nExample 2:\ngraphName:   legal_cases\nopenCypher:  MATCH (c1:Case)-[r1:cites]-&gt;(c2:Case)-[r2:cites]-&gt;() RETURN r1, r2 limit 3 \nAGE SQL:     select * from ag_catalog.cypher('legal_cases', $$ MATCH (c1:Case)-[r1:cites]-&gt;(c2:Case)-[r2:cites]-&gt;() RETURN r1, r2 limit 3 $$) as (r1 agtype, r2 agtype);\n\nExample 3:\ngraphName:   legal_cases\nopenCypher:  MATCH (c1:Case)-[r1:cited_by]-&gt;(c2:Case)-[r2:cited_by]-&gt;() RETURN r1, r2\nAGE SQL:     select * from ag_catalog.cypher('legal_cases', $$ MATCH (c1:Case)-[r1:cited_by]-&gt;(c2:Case)-[r2:cited_by]-&gt;() RETURN r1, r2 $$) as (r1 agtype, r2 agtype);\n</code></pre> The above two prompts are python Jinja2 templates that are provided dynamic values (i.e. - natural_language, graph_name, and open_cypher) at runtime for text generation. These two prompts are files \"python/templates/cypher_gen_llm_prompt.txt\" and \"python/templates/wrap_opencypher_in_age_sql.txt\" in the repository source code.Please feel free to modify these prompts to suit your own application needs. The of Prompt Engineering is fast evolving.</p>"},{"location":"tutorial_pg_admin/","title":"Tutorial pg admin","text":""},{"location":"tutorial_pg_admin/#aigraph4pg-tutorial-azure-postgresql-administration","title":"AIGraph4pg Tutorial : Azure PostgreSQL Administration","text":""},{"location":"tutorial_pg_admin/#postgresql-documentation","title":"PostgreSQL Documentation","text":"<p>There is a vast amount of documentation available for PostgreSQL, including:</p> <ul> <li>Official documentation in HTML format.</li> <li>Official documentation in PDF format.   The PDF file alone is over 3100 pages long</li> <li>Azure Database for PostgreSQL - Flexible Server documentation</li> </ul> <p>This tutorial can't possibly cover the entire breadth and depth of PostgreSQL, and therefore just focuses on the following topics related to this reference application - PostgreSQL Settings, PostgreSQL Catalog, and Apache AGE.</p>"},{"location":"tutorial_pg_admin/#postgresql-settings","title":"PostgreSQL Settings","text":"<p>PostgreSQL is highly configurable via a large set of Server Parameters and some of these may be optimized for performance tuning.These can be viewed and administered in Azure Portal as shown below:</p> <p></p> <p>Likewise, these parameters may be queried in a client program such as psql with the following SQL: <pre><code>    select name, setting, category, short_desc\n    from  pg_settings\n    order by name;\n</code></pre> This SQL is one of the items in the drop-down list of queries for the PG Admin Queries page of this reference application, thus you can execute it in the web UI.All of the SQL queries in this reference application UI are defined in file python/config/sample_queries.txt in this repo. You can edit and customize this file as necessary for your needs.Azure Database for PostgreSQL offers automated intelligent tuning of these parameters for your workload. This feature is described here: Configure intelligent tuning for Azure Database for PostgreSQL.</p>"},{"location":"tutorial_pg_admin/#postgresql-catalog","title":"PostgreSQL Catalog","text":"<p>As with the server parameters, the catalog of schemas, tables, indexes, and other objects is queryable with SQL. A few example queries are shown below:Display the columns in a given relational table (i.e. - legal_cases): <pre><code>    select  ordinal_position, table_catalog, table_name, column_name, data_type, character_maximum_length\n    from  information_schema.columns\n    where table_name = 'legal_cases'\n    order by ordinal_position;\n</code></pre></p>"},{"location":"tutorial_pg_admin/#postgresql-extensions","title":"PostgreSQL Extensions","text":"<p>List of Available Extensions: <pre><code>    select name, default_version, installed_version, comment\n    from  pg_available_extensions\n    where installed_version is null\n    order by name;\n</code></pre> List of Installed Extensions: <pre><code>    select oid, extname, extversion\n    from  pg_extension\n    order by extname, extversion;\n</code></pre></p>"},{"location":"tutorial_pg_admin/#apache-age","title":"Apache AGE","text":"<p>List the Apache AGE Graphs: <pre><code>    select graphid, name, namespace\n    from  ag_catalog.ag_graph\n    order by graphid;\n</code></pre> List the Apache AGE Graph Labels - the Vertex and Edge types: <pre><code>    select name, graph, id, kind, relation, seq_name\n    from  ag_catalog.ag_label\n    order by name;\n</code></pre></p>"},{"location":"tutorial_relational/","title":"Tutorial relational","text":""},{"location":"tutorial_relational/#aigraph4pg-tutorial-relational-functionality","title":"AIGraph4pg Tutorial : Relational Functionality","text":""},{"location":"tutorial_relational/#postgresql-documentation","title":"PostgreSQL Documentation","text":"<p>There is a vast amount of documentation available for PostgreSQL, including:</p> <ul> <li>Official documentation in HTML format.</li> <li>Official documentation in PDF format.   The PDF file alone is over 3100 pages long</li> <li>Azure Database for PostgreSQL - Flexible Server documentation</li> </ul> <p>This tutorial can't possibly cover the entire breadth and depth of PostgreSQL, and therefore just focuses on the following topics related to this reference application - Table Inheritance, JSON data, and the JSONB datatype.</p>"},{"location":"tutorial_relational/#table-inheritance","title":"Table Inheritance","text":"<p>You may already be familiar with the concept of inheritance in object-oriented programming (OOP). Object Oriented Programming allows you to define a superclass with common attributes and logic, then extend or inherit from that superclass to create subclasses which use that common logic. This enables code reuse and higher quality application code. For example, an in an automative application, you could define superclass \"Vehicle\", and subclasses \"Sedan\", \"SUV\", and \"Coupe\" that inherit from \"Vehicle\".PostgreSQL offers similar functionality. You can define a table, then use the INHERITS keyword to create a new table based on the parent table. The subtable can optionally add additional columns, as shown below. <pre><code>  CREATE TABLE cities (\n      name            text,\n      population      float,\n      elevation       int\n  );\n\n  CREATE TABLE capitals (\n      state           char(2)\n  ) INHERITS (cities);\n</code></pre> This feature is documented here in the official PostgreSQL documentation.In the next section on Graph Queries you'll see that Apache AGE makes extensive use of table inheritance.</p>"},{"location":"tutorial_relational/#json-data-and-the-jsonb-datatype","title":"JSON data and the JSONB datatype","text":"<p>PostgreSQL is one of the few relational databases that currently supports JSON data. This functionality is becoming increasingly important as JSON has become the standard data format for web services and APIs, and the trend in IT is toward more and more unstructured data vs structure data.Please see the official documentation on JSON Types here.This reference application contains one relational table named legal_cases and is created with the following DDL (Data Definition Language): <pre><code>    DROP TABLE IF EXISTS legal_cases CASCADE;\n\n    CREATE TABLE legal_cases (\n        id                   bigserial primary key,\n        name                 VARCHAR(1024),\n        name_abbreviation    VARCHAR(1024),\n        case_url             VARCHAR(1024),\n        decision_date        DATE,\n        court_name           VARCHAR(1024),\n        citation_count       INTEGER,\n        text_data            TEXT,\n        json_data            JSONB,\n        embedding            vector(1536)\n    );\n</code></pre> Note the column named json_data with the JSONB datatype which is populated with text data in the JSON format. JSONB is a binary representation of JSON data, and it supports indexing.To make the JSON data efficiently queryable, one should create an index on the column. For JSONB columns, the GIN (Generalized Inverted Index) index type is recommended. <pre><code>    DROP INDEX IF EXISTS idx_legal_cases_json_data_gin;\n\n    CREATE INDEX idx_legal_cases_json_data_gin\n    ON legal_cases USING gin (json_data);\n</code></pre> This reference application populates this column with JSON values that look like the following when \"pretty printed\" (see bottom of this page). As you can see, it a large and deeply nested JSON object.This JSON data can now be queried, at any depth, with extensions to the SQL language. For example, to query where the decision_date attribute for the value \"1967-04-13\", you could use the following SQL: <pre><code>    select id, json_data\n    from  legal_cases\n    where json_data @&gt; '{\"decision_date\": \"1967-04-13\"}'\n    limit 5;\n</code></pre> The JSON query syntax is further described here in the JSON Functions and Operators section of the official documentation.This query returns the following value, given the reference dataset.In the returned result set of one document, notice how there are many \"cites_to\" objects, but each of these do NOT have the same structure. This is a good example of using the JSONB datatype for schemaless and variable data in PostgreSQL. <pre><code>    {\n      \"id\": 1095193,\n      \"name\": \"Carrie Thomas, Respondent, v. Housing Authority of the City of Bremerton, Appellant\",\n      \"court\": {\n        \"id\": 9029,\n        \"name\": \"Washington Supreme Court\",\n        \"name_abbreviation\": \"Wash.\"\n      },\n      \"analysis\": {\n        \"sha256\": \"ef64570210a5daef08674658da854019fca9a103a1b1175ad61899b0f2783de7\",\n        \"simhash\": \"1:f1d3bc51437a8e06\",\n        \"pagerank\": {\n          \"raw\": 2.1057695284947042e-07,\n          \"percentile\": 0.7624712869360337\n        },\n        \"char_count\": 24251,\n        \"word_count\": 3992,\n        \"cardinality\": 1216,\n        \"ocr_confidence\": 0.634\n      },\n      \"case_url\": \"https://static.case.law/wash-2d/71/cases/0069-01.json\",\n      \"casebody\": {\n        \"judges\": [],\n        \"parties\": [\n          \"Carrie Thomas, Respondent, v. Housing Authority of the City of Bremerton, Appellant.\"\n        ],\n        \"opinions\": [\n          {\n            \"text\": \"Finley, C. J.\\nOne morning, Carrie Thomas, then age 18 months u00e2u0080u0094 now the minor plaintiff in this lawsuit u00e2u0080u0094 was playing in the low-rent, 1-bedroom apartment which her parents leased from the defendant public housing authority. Her mother was not feeling well and was taking a nap in the bedroom. Carrieu00e2u0080u0099s 17-year-old uncle, Floyd Grubs, was engaged in washing and rinsing dishes in a mixture of hot and cold water. Suddenly Carrie screamed. Her young uncle rushed into the bathroom. He found the child standing beside a small pool of water which had overflowed from the washbasin. Her nightgown was soaking wet on the left side. Water so hot it approached boiling temperature filled the basin. The hot-water faucet handle was too hot to touch. Apparently Carrie had climbed up, turned on the faucet, and fallen into the washbasin after it had filled with water. The entire left side of her body was severely scalded. Second and third degree burns and permanent injuries resulted.\\nCarrie Thomas and her parents had moved into their low-rent apartment unit some 4 months before the accident. It was one of 582 living units in the project known as West Park, operated by the defendant public housing authority. The Thomasesu00e2u0080u0099 written lease with defendant contained, inter alia, the following provisions:\\nLiability u00e2u0080u0094 The Management shall not be responsible for loss or damage to property, nor injury to persons, occuring [sic] in or about the demised premises, by reason of any existing or future condition, defect, matter or thing in said demised premises or the property of which the premises are a part, nor for the acts, omissions or negligence of other persons or Tenants in and about the said property. The Tenant agrees to indemnify and save the Management, its representatives and employees harmless from all claims and liability for damage to property or injuries to persons occuring [sic] in or about the demised premises\\nTenantu00e2u0080u0099s Responsibilities\\nb. Entry u00e2u0080u0094 The Management may enter the premises during all reasonable time for inspection or repairs, or to remove signs, alterations or additions placed on the premises without permission.\\nc. Damage u00e2u0080u0094 The tenant shall notify the Management immediately of necessary repairs or of damage to buildings or fixtures.\\nThe heating appliance which furnished hot water for the Thomasesu00e2u0080u0099 apartment was about 22 years old at the time of the accident. A small plate or cover on the side of the water heater bore a legend reading u00e2u0080u009cremove plate for adjustment.u00e2u0080u009d Underneath the cover was a set screw which in effect operated as a lever to adjust the thermostat and the temperature of the water from extreme u00e2u0080u009chotu00e2u0080u009d to extreme u00e2u0080u009ccoldu00e2u0080u009d or some intermediate point. At the time plaintiff suffered her injuries, the mechanism was set all the way to the u00e2u0080u009chotu00e2u0080u009d position. Even if the mechanism had been set at a lower or colder temperature reading, nevertheless, the water temperature actually produced could have been extremely hot. This is because the set screw could be unscrewed, moved, and reset to vary and to make the entire temperature range either higher or lower. Testimony introduced at the trial was capable of supporting a jury finding that no one checked the position of the set screw or the temperature range of the water before Carrie and her parents moved into the apartment, nor while they resided there. Three times during the period in which the Thomases resided in the apartment, defendantu00e2u0080u0099s maintenance man serviced the water heater at the Thomasesu00e2u0080u0099 request. The servicing consisted of cleaning out soot, adjusting the air on the burner, and, on one occasion, relighting the pilot light; but it did not entail checking or changing the thermostat adjustment.\\nThe water heater in question was tested after the accident. On the hottest setting, it produced water ranging from 180 to 208 degrees fahrenheit. On six arbitrarily chosen lower settings, it produced lower ranges of temperature down to 122 to 126 degrees on the lowest setting, with the one exception that it once produced water of 200 degrees on the middle setting after the burner was left on overnight. Expert testimony produced at the trial tended to show that, based on the distortion of a plastic toothbrush which had been in the washbasin, the water which scalded Carrie was approximately 200 degrees fahrenheit, or hotter.\\nThis lawsuit was instituted by her guardian ad litem alleging that her injuries were proximately caused by the negligence of the defendant-appellant public housing authority. The jury returned a verdict for the plaintiff upon which judgment was entered, and the defendant appeals contending it is entitled to a judgment of dismissal as a matter of law. Defendant-appellantu00e2u0080u0099s three assignments of error raise three questions which we will now discuss:\\nFirst, the defendant housing authority maintains that it was under no duty to prevent the injuries posed in plaintiffu00e2u0080u0099s complaint; i.e., it is not chargeable with negligence because the occurrence of the accident was not reasonably foreseeable. Anderson v. Reeder, 42 Wn.2d 45, 253 P.2d 423 (1953), and Fritsche v. Seattle, 10 Wn.2d 357, 116 P.2d 562 (1941), stand for the unquestioned proposition that when an accident occurs which is not reasonably foreseeable and which, according to common experience, is not likely to happen, a defendant is not chargeable with negligence. However, for a defendant to be held liable for maintaining a dangerous condition, proof as to foreseeability of the particular manner or nature of the occurrence is not necessary. It is sufficient if the general type of danger is reasonably foreseeable. Fleming v. Seattle, 45 Wn.2d 477, 275 P.2d 904 (1954).\\nThe defendantu00e2u0080u0099s maintenance superintendent admitted on the witness stand that water even as hot as 180 degrees fahrenheit was dangerously hot. The fact that he considered it dangerous clearly implies that he could foresee that people could be exposed to it long enough to cause injury. This seems particularly pertinent in view of the well known fact that many small children were living in the low-rent public housing project.\\nAs indicated hereinbefore, there was substantial evidu00c3u00a9nce produced at the trial to support a jury determination that the water which scalded Carrie was 200 degrees fahrenheit, or hotter. There was also evidence that the defendantu00e2u0080u0099s maintenance employees knew that the hot water from this type of hot water tank could and did reach 200 degrees, and hotter, when the thermostat was out of adjustment or the lever was on the highest setting. It should reasonably have been known to the defendantu00e2u0080u0099s agents that exposure to water of that heat even momentarily could cause serious injuries. Tending to support a conclusion that the injuries suffered by the plaintiff were a foreseeable consequence of the overly hot water is our decision in Kidwell v. School Dist. No. 300, 53 Wn.2d 672, 335 P. 2d 805 (1959). Therein, this court held that an injury to a child which occurred in the moving of a precariously balanced, high upright piano in a school activities room was sufficiently foreseeable to sustain liability.\\nWe find further support for concluding that the injuries were reasonably foreseeable in a case involving a somewhat analogous factual pattern. In Thompson v. Paseo Manor South, Inc., 331 S.W.2d 1 (Mo. App. 1959), a 22-month-old child fell from her bed and came into contact with uninsulated and unprotected heating pipes which caused injuries for which suit was brought against the landlord. In reversing a judgment for the defendant landlord, the court, 331 S.W.2d at 6-7, made the following observation in regard to foreseeability:\\nIt may be conceded that this child falling from its bed and becoming entangled in the pipes and receiving the injuries complained of was an unusual occurrence. But the landlord knew that the child occupied the apartment, and no doubt knew of children occupying other similar apartments. It is not the unusual manner of receiving injuries that determines liability, but whether the defendant could have reasonably anticipated that a child would receive injuries from the pipes. In Hammontree v. Edison Bros. Stores, Inc., Mo. App., 270 S.W.2d 117, 126, it is said: u00e2u0080u009cRelating to those dangers to be reasonably anticipated u00e2u0080u0094 if there is some probability or likelihood, not a mere possibility, of harm sufficiently serious that ordinary men would take precautions to avoid it, then the failure to do so is negligence. While the likelihood of a future happening is the test of a duty to anticipate, this does not mean the chances in favor of the happening must exceed those against it. The test is not the balance of probabilities, but of the existence of some probability of sufficient moment to induce the reasonable mind to take the precautions which would avoid it.u00e2u0080u009d (Italics ours.)\\nWe think that the evidentiary pattern of the instant case meets the test or standard for establishing liability, i.e., the overly hot water posed a danger to tenants and children of tenants of the housing project which was sufficiently foreseeable to support a determination of liability. See also Housinq Authority of Birmingham v. Morris, 244 Ala. 557, 14 So. 2d 527 (1943).\\nNext, the defendant maintains that assuming the water was excessively hot, it is not liable under applicable landlord-tenant law. The defendant cites such cases as Flannery v. Nelson, 59 Wn.2d 120, 366 P.2d 329 (1961), and Mesher v. Osborne, 75 Wash. 439, 134 Pac. 1092 (1913), for the proposition that a landlord is not liable for an obvious or patent defect, and is only liable for an obscure or latent defect, if he has actual knowledge of it. Conceding this to be a fair statement of the law of Washington and of some other states, nevertheless in many other jurisdictions, actual knowledge of the landlord is not required as the basis of liability if he has knowledge of facts which would lead a reasonable man to suspect the defect actually exists.\\nAssuming our landlord and tenant law to be as indicated above, we are convinced the evidence in this case shows an obscure or latent defect or dangerous condition existed. Dr. Botimer testified that, in his opinion, if the water had been 140 degrees fahrenheit instead of 200 degrees, Carrie would not have suffered severe second and third degree burns on the entire left side of her body nor lost three fingers as she did, i.e., her injuries, if any, would have been very minor. From the testimony of various witnesses, the jury could have found that there is no way for the average person to tell the difference between water of 140 degrees fahrenheit and water heated to 200 degrees fahrenheit without using a high range thermometer, which the average person does not have and would not think of using. The verdict indicates a jury determination that the hot water heater or its condition at the time constituted an obscure or latent dangerous condition. A sufficient basis was laid relating to the issue involved, and the question was properly submitted to the jury for its determination. Howard v. Washington Water Power Co., 75 Wash. 255, 134 Pac. 927 (1913).\\nThere is some dispute about the extent or the character of the knowledge of the defect necessary to render the defendant liable under existing law. The plaintiff points out that the type of water heater involved was installed throughout the housing project, and emphasizes evidence showing that the maintenance men of the defendant knew that this type of water heater could produce dangerously hot water. It is further emphasized that tenants sometimes unwittingly altered the temperature range of the heaters and that the projectsu00e2u0080u0099 hot water faucets thus on occasion produced not only water too hot for safe domestic use but even live steam. Plaintiff then cites Carusi v. Schulmerick, 98 F.2d 605 (D.C. Cir. 1938), wherein the landlordu00e2u0080u0099s agents knew of a latent defect in a particular type of window installed throughout an apartment building. The court seems to have held such knowledge was sufficient to render the landlord liable when, because of its dangerous condition, one such window fell and injured the plaintiff.\\nContrariwise, the defendant cites Daulton v. Williams, 81 Cal. App. 2d 70, 183 P.2d 325 (1947). We do not find that case to be apposite. The court in Daulton specifically stated that the defect involved was a patent one.\\nIn any event, we do not find it necessary to decide whether the defendant possessed the requisite knowledge solely on the basis of its knowledge as to the dangerous condition inherent in this type of water heater.\\nThere was testimony that Floyd Grubs, while living in the Thomasesu00e2u0080u0099 apartment, had complained to defendantu00e2u0080u0099s maintenance man that the water in the apartment was too hot. This was a month or two before the accident and at a time when the maintenance man was cleaning the water heater in question. Neither Grubs nor the Thomases had reason to know how hot too hot was, but the defendantu00e2u0080u0099s maintenance personnel had good reason to know that too hot could be dangerously hot. There was sufficient evidence presented for the jury to conclude that the defendant had actual knowledge of the defect or dangerous conditions. See Howard v. Washington Power Co., supra.\\nBeing aware of the danger, the defendant at the very least could have taken the following simple and economically feasible precautions: (1) check the temperature of the water produced by each water heater in the course of the regular between-tenants inspection of the apartments, and (2) advise all tenants, particularly new ones on their entry, to be careful regarding the hot water in the apartments and especially not to change the screw setting on the thermostat since this could cause the water to be heated to a dangerously hot temperature. Defendant took none of these steps in regard to the Thomases or the water heater in their apartment. Having failed to discharge its responsibility, the defendant must bear the consequences.\\nThe defendantu00e2u0080u0099s third argument is that the provision of the lease, quoted above, which relates to liability is effective to release it from liability for Carrieu00e2u0080u0099s injuries. In support of the validity of this exculpatory clause, the defendant cites this courtu00e2u0080u0099s decisions in Magerstaedt v. Eric Co., 64 Wn.2d 298, 391 P.2d 533 (1964); Griffiths v. Henry Broder ick, Inc., 27 Wn.2d 901, 182 P.2d 18, 175 A.L.R. 1 (1947); and Broderson v. Rainier Natu00e2u0080u0099l Park Co., 187 Wash. 399, 60 P.2d 234 (1936). In the Griffiths case, the court held that an agreement by which a private apartment house owner held the manager harmless from liability for injuries resulting from any cause, including its own negligence, was not contrary to public policy. Because of the difference in the character and relationship of the parties to the agreement in Griffiths, that case is not determinative of the issue here presented.\\nNeither is the Broderson case apposite, since there the issue concerned the validity of a release of liability clause whereby the defendant, which rented winter sports equipment, protected itself against liability to those patrons who voluntarily chose to participate in dangerous winter sports. We note, however, that the opinion in Broderson, 187 Wash, at 404, contains the following language:\\nConsidering the question whether the waiver was void as against public policy, it is a well-recognized rule that corporations engaged in the performance of public duties, as for instance, common carriers, and, generally, those engaged in the operation of public utilities, cannot by contract relieve themselves of liability for negligence in the performance of their duty to the public or the measure of care they owe their patrons under the law. Hartford Fire Ins. Co. v. Chicago M. &amp; S.P.R. Co., 175 U.S. 91, 20 S. Ct. 33; Railroad Co. v. Lockwood, 84 U.S. 357.\\nIn the Magerstaedt decision, there is language which supports the validity of a lease provision relieving the corporate lessor from liability to the lessee of a restaurant for certain causes, although the exculpatory clause was not the basis of the decision in that case. The landlord-tenant relationship in that case, however, was quite different than in the instant matter.\\nThe Laws of 1939, ch. 23, now codified as RCW 35.82, created the defendant public housing authority and enabled it to build and operate the West Park project in which the Thomases lived. It is noteworthy that RCW 35.82.010 reads in part as follows:\\nFinding and declaration of necessity. It is 'hereby declared: (1) that there exist in the state insanitary or unsafe dwelling accommodations and that persons of low income are forced to reside in such insanitary or unsafe accommodations; that within the state there is a shortage of safe or sanitary dwelling accommodations available at rents which persons of low income can afford and that such persons are forced to occupy overcrowded and congested dwelling accommodations; . . . (2) that these areas in the state cannot be cleared, nor can the shortage of safe and sanitary dwellings for persons of low income be relieved, through the operation of private enterprise, and that the construction of housing projects for persons of low income (as herein defined) would therefore not be competitive with private enterprise; (3) that the clearance, replanning and reconstruction of the areas in which insanitary or unsafe housing conditions exist and the providing of safe and sanitary dwelling accommodations for persons of low income are public uses and purposes for which public money may be spent and private property acquired and are governmental functions of state concern; ....\\nThe definition of u00e2u0080u009chousing project,u00e2u0080u009d as found in RCW 35.82.020, contains the following language:\\n(9) u00e2u0080u009cHousing projectu00e2u0080u009d shall mean any work or undertaking: . . . (b) to provide decent, safe and sanitary urban or rural dwellings, apartments or other living accommodations for persons of low income; ....\\nFrom this expression of the legislature, the conclusion is inescapable that two of the primary objectives in creating public housing authorities such as the defendant are: (1) to provide safe and sanitary housing, and (2) to make such housing available to persons of low income who otherwise would be forced to reside in unsanitary and unsafe housing.\\nPublic housing such as that provided by the defendant is only available to u00e2u0080u009cpersons of low income,u00e2u0080u009d in other words, those who the legislature has determined are unable to obtain safe and sanitary housing elsewhere. The situation presents a classic example of unequal bargaining power. Dean Prosser analyzes the problem and the applicable law as follows:\\nIt is quite possible for the parties expressly to agree that the defendant is under no obligation of care for the benefit of the plaintiff, and shall not be liable for the consequences of conduct which would otherwise be negligence. There is no public policy which prevents the parties from contracting as they see fit. Thus one who accepts a gratuitous pass on a railway train, or enters into a lease or some other relation, may agree that there shall be no responsibility for negligence.\\nThe courts have refused to uphold such agreements, however, where one party is at such obvious disadvantage in bargaining power that the effect of the contract is to put him at the mercy of the otheru00e2u0080u0099s negligence. Prosser, Torts u00c2u00a7 55, at 305-06 (2d ed. 1955). (Italics ours.)\\nWe think that the instant matter, in which the Thomases had to sign the defendantu00e2u0080u0099s standard lease form in order to acquire housing at West Park, is an example of an obvious disadvantage in bargaining power which would have the effect, if the exculpatory provision were upheld, of putting the tenants at the mercy of the defendant housing authorityu00e2u0080u0099s negligence. This would be contrary to the public policy inherent in the basic legislation and authorization relative to low rent public housing.\\nIn support of its position on the validity of the exculpatory provision in the lease, the defendant also cites Manius v. Housing Authority of Pittsburgh, 350 Pa. 512, 39 A.2d 614 (1944). The Manius case did uphold a release clause in a lease between a tenant and a public housing authority against a challenge that it was void as against public policy. The Pennsylvania court did not give much consideration to the argument, however, and dismissed it rather summarily in a brief paragraph.\\nIn Housing Authority of Birmingham v. Morris, 244 Ala. 557, 14 So.2d 527 (1943), the Supreme Court of Alabama held that a disclaimer of liability by a housing authority is not effective to insulate it from liability to its tenants for its own negligence. Curiously enough, the Morris case also involved a plaintiff who was scalded by hot water, the injury being caused by the defendantu00e2u0080u0099s negligent maintenance of a hot water heater. On rehearing, the court unanimously adhered to its prior opinion and concluded that the housing authority could not be allowed to u00e2u0080u009ccreate and maintain a trap to inflict personal injury upon its tenants.u00e2u0080u009d 14 So.2d at 535. The careful and exhaustive analysis of the Alabama court was based in part on consideration of the statutes which authorized and created the housing authority. These statutes, which the court quoted at length and which are very similar to those of this state found in RCW 35.82, emphasized that the purpose of the housing projects was to provide safe and sanitary housing for persons of low income. We believe the Morris decision is better and more carefully reasoned than that in Manius.\\nWe conclude that it is against the public policy of this state, as expressed by the legislature, to allow a public housing authority, created to provide safe and sanitary housing for persons of low income, to exempt itself by prearrangement or contract from liability to its tenants for its own negligence.\\nThe judgment is affirmed.\\nDonworth, Rosellini, and Hamilton, JJ., and Barnett, J. Pro Tern., concur.\\nSee, e.g., Wagner v. Kepler, 411 Ill. 368, 104 N.E.2d 231 (1951); Harrill v. Sinclair Ref. Co., 225 N.C. 421, 35 S.E.2d 240 (1945); Murphy v. Barlow Realty Co., 214 Minn. 64, 7 N.W.2d 684 (1943); Hines v. Wilcox, 96 Tenn. 148, 33 S.W. 914 (1896); Cutter v. Hamlen, 147 Mass. 471, 18 N.E. 397 (1888); and other cases and authorities cited in 2 Harper &amp; James, Torts u00c2u00a7 27.16, at 1509, nn. 16 and 17 (1956). Dean Prosser considers the requirement of actual knowledge to be the minority view. Prosser, Torts u00c2u00a7 80, at 467 (2d ed. 1955). In the view of the Restatement (Second), Torts u00c2u00a7 358 (1) (1965), liability attaches if u00e2u0080u009cthe lessor knows or has reason to know of the condition, and realizes or should realize the risk involved, and has reason to expect that the lessee will not discover the condition or realize the risk.u00e2u0080u009d (Italics ours.)\\nIt is also clear that the legislature had no intention of shielding housing authorities such as the defendant from suit, RCW 35.82.070 provides in part:\\n2 Powers of authority. An authority shall constitute a public body corporate and politic, exercising public and essential governmental functions, and having all the powers necessary or convenient to carry out and effectuate the purposes and provisions of this chapter, including the following powers in addition to others herein granted: (1) To sue and be sued; ....\\nAnother case in. which an exculpatory clause in a lease with a public housing authority was before an appellate court is Harper v Vallejo Housing Authority, 104 Cal. App. 2d 621, 232 P.2d 262 (1951). In that case, the court affirmed a judgment for the minor plaintiff in spite of the release provision in the lease. The court was not called upon to determine the validity of the provision, however, as the suit was only for the childu00e2u0080u0099s injuries and the court determined the release to be ineffective to contract away the minor plaintiffu00e2u0080u0099s rights.\",\n            \"type\": \"majority\",\n            \"author\": \"Finley, C. J.\"\n          }\n        ],\n        \"attorneys\": [\n          \"Hullin, Ehrlichman, Carroll &amp; Roberts, Jack E. Hullin, and Helen Graham Greear, for appellant.\",\n          \"Kahin, Horswill, Keller, Rohrback, Waldo &amp; Moren, Harold Far dal, Greenwood, Shiers &amp; Kruse, and Frank A. Shiers, for respondent.\"\n        ],\n        \"corrections\": \"\",\n        \"head_matter\": \"[No. 38561.\\nDepartment Two.\\nApril 13, 1967.]\\nCarrie Thomas, Respondent, v. Housing Authority of the City of Bremerton, Appellant.\\nHullin, Ehrlichman, Carroll &amp; Roberts, Jack E. Hullin, and Helen Graham Greear, for appellant.\\nKahin, Horswill, Keller, Rohrback, Waldo &amp; Moren, Harold Far dal, Greenwood, Shiers &amp; Kruse, and Frank A. Shiers, for respondent.\\nReported in 426 P.2d 836.\"\n      },\n      \"cites_to\": [\n        {\n          \"cite\": \"426 P.2d 836\",\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": -1\n        },\n        {\n          \"cite\": \"232 P.2d 262\",\n          \"year\": 1951,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"104 Cal. App. 2d 621\",\n          \"year\": 1951,\n          \"case_ids\": [\n            2263883\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Cal. App. 2d\",\n          \"case_paths\": [\n            \"/cal-app-2d/104/0621-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"18 N.E. 397\",\n          \"year\": 1888,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"N.E.\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"147 Mass. 471\",\n          \"year\": 1888,\n          \"case_ids\": [\n            782512\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Mass.\",\n          \"case_paths\": [\n            \"/mass/147/0471-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"33 S.W. 914\",\n          \"year\": 1896,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"S.W.\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"96 Tenn. 148\",\n          \"year\": 1896,\n          \"case_ids\": [\n            8536490\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Tenn.\",\n          \"case_paths\": [\n            \"/tenn/96/0148-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"7 N.W.2d 684\",\n          \"year\": 1943,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"N.W.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"214 Minn. 64\",\n          \"year\": 1943,\n          \"case_ids\": [\n            219822\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Minn.\",\n          \"case_paths\": [\n            \"/minn/214/0064-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"35 S.E.2d 240\",\n          \"year\": 1945,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"S.E.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"225 N.C. 421\",\n          \"year\": 1945,\n          \"case_ids\": [\n            8610306\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"N.C.\",\n          \"case_paths\": [\n            \"/nc/225/0421-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"104 N.E.2d 231\",\n          \"year\": 1951,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"N.E.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"411 Ill. 368\",\n          \"year\": 1951,\n          \"case_ids\": [\n            5312919\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Ill.\",\n          \"case_paths\": [\n            \"/ill/411/0368-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"39 A.2d 614\",\n          \"year\": 1944,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"A.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"350 Pa. 512\",\n          \"year\": 1944,\n          \"case_ids\": [\n            461209\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Pa.\",\n          \"case_paths\": [\n            \"/pa/350/0512-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"84 U.S. 357\",\n          \"case_ids\": [\n            62446\n          ],\n          \"category\": \"reporters:federal\",\n          \"reporter\": \"U.S.\",\n          \"case_paths\": [\n            \"/us/84/0357-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"175 U.S. 91\",\n          \"weight\": 2,\n          \"case_ids\": [\n            1239473\n          ],\n          \"category\": \"reporters:federal\",\n          \"reporter\": \"U.S.\",\n          \"case_paths\": [\n            \"/us/175/0091-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"60 P.2d 234\",\n          \"year\": 1936,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"187 Wash. 399\",\n          \"year\": 1936,\n          \"case_ids\": [\n            477678\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash.\",\n          \"case_paths\": [\n            \"/wash/187/0399-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"175 A.L.R. 1\",\n          \"year\": 1947,\n          \"category\": \"reporters:specialty\",\n          \"reporter\": \"A.L.R.\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"182 P.2d 18\",\n          \"year\": 1947,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"27 Wn.2d 901\",\n          \"year\": 1947,\n          \"case_ids\": [\n            2520563\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/27/0901-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"391 P.2d 533\",\n          \"year\": 1964,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"64 Wn.2d 298\",\n          \"year\": 1964,\n          \"case_ids\": [\n            1043159\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/64/0298-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"183 P.2d 325\",\n          \"year\": 1947,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"81 Cal. App. 2d 70\",\n          \"year\": 1947,\n          \"case_ids\": [\n            4437232\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Cal. App. 2d\",\n          \"case_paths\": [\n            \"/cal-app-2d/81/0070-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"98 F.2d 605\",\n          \"year\": 1938,\n          \"case_ids\": [\n            990235\n          ],\n          \"category\": \"reporters:federal\",\n          \"reporter\": \"F.2d\",\n          \"case_paths\": [\n            \"/f2d/98/0605-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"134 Pac. 927\",\n          \"year\": 1913,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"75 Wash. 255\",\n          \"year\": 1913,\n          \"case_ids\": [\n            622625\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash.\",\n          \"case_paths\": [\n            \"/wash/75/0255-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"134 Pac. 1092\",\n          \"year\": 1913,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"75 Wash. 439\",\n          \"year\": 1913,\n          \"case_ids\": [\n            622661\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash.\",\n          \"case_paths\": [\n            \"/wash/75/0439-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"366 P.2d 329\",\n          \"year\": 1961,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"59 Wn.2d 120\",\n          \"year\": 1961,\n          \"case_ids\": [\n            1028362\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/59/0120-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"244 Ala. 557\",\n          \"year\": 1943,\n          \"weight\": 5,\n          \"case_ids\": [\n            3668814\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Ala.\",\n          \"pin_cites\": [\n            {\n              \"page\": \"535\"\n            }\n          ],\n          \"case_paths\": [\n            \"/ala/244/0557-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"270 S.W.2d 117\",\n          \"case_ids\": [\n            10186343\n          ],\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"S.W.2d\",\n          \"pin_cites\": [\n            {\n              \"page\": \"126\"\n            }\n          ],\n          \"case_paths\": [\n            \"/sw2d/270/0117-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"331 S.W.2d 1\",\n          \"year\": 1959,\n          \"weight\": 2,\n          \"case_ids\": [\n            10152471\n          ],\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"S.W.2d\",\n          \"pin_cites\": [\n            {\n              \"page\": \"6-7\"\n            }\n          ],\n          \"case_paths\": [\n            \"/sw2d/331/0001-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"335 P. 2d 805\",\n          \"year\": 1959,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"53 Wn.2d 672\",\n          \"year\": 1959,\n          \"case_ids\": [\n            1011254\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/53/0672-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"275 P.2d 904\",\n          \"year\": 1954,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"45 Wn.2d 477\",\n          \"year\": 1954,\n          \"case_ids\": [\n            2428179\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/45/0477-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"116 P.2d 562\",\n          \"year\": 1941,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"10 Wn.2d 357\",\n          \"year\": 1941,\n          \"case_ids\": [\n            2604371\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/10/0357-01\"\n          ],\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"253 P.2d 423\",\n          \"year\": 1953,\n          \"category\": \"reporters:state_regional\",\n          \"reporter\": \"P.2d\",\n          \"opinion_index\": 0\n        },\n        {\n          \"cite\": \"42 Wn.2d 45\",\n          \"year\": 1953,\n          \"case_ids\": [\n            5001076\n          ],\n          \"category\": \"reporters:state\",\n          \"reporter\": \"Wash. 2d\",\n          \"case_paths\": [\n            \"/wash-2d/42/0045-01\"\n          ],\n          \"opinion_index\": 0\n        }\n      ],\n      \"citations\": [\n        {\n          \"cite\": \"71 Wash. 2d 69\",\n          \"type\": \"official\"\n        }\n      ],\n      \"file_name\": \"0069-01\",\n      \"last_page\": \"80\",\n      \"first_page\": \"69\",\n      \"provenance\": {\n        \"batch\": \"2018\",\n        \"source\": \"Harvard\",\n        \"date_added\": \"2019-08-29\"\n      },\n      \"jurisdiction\": {\n        \"id\": 38,\n        \"name\": \"Wash.\",\n        \"name_long\": \"Washington\"\n      },\n      \"last_updated\": \"2024-02-27T16:16:18.331048+00:00\",\n      \"decision_date\": \"1967-04-13\",\n      \"docket_number\": \"No. 38561\",\n      \"citation_count\": 5,\n      \"last_page_order\": 240,\n      \"first_page_order\": 229,\n      \"name_abbreviation\": \"Thomas v. Housing Authority\"\n    }\n</code></pre></p>"},{"location":"tutorial_vector_search/","title":"Tutorial vector search","text":""},{"location":"tutorial_vector_search/#aigraph4pg-tutorial-vector-search","title":"AIGraph4pg Tutorial : Vector Search","text":""},{"location":"tutorial_vector_search/#coming-soon-advanced-vector-search-with-diskann-and-semantic-ranking","title":"Coming Soon: Advanced Vector Search with DiskANN and Semantic Ranking","text":"<p>This reference application does not yet implement vector search with DiskANN, and augmented with Semantic Ranking. This functionality is expected to be added to this project in January/February 2025.DiskANN is a set of advanced algorithms for vector search and semantic ranking developed by Microsoft Research. It enables high-scalability, high-performance as well as lower costs.DiskANN is being integrated into several Microsoft products. It is currently available in preview mode for Azure Database for PostgreSQL - Flexible Server.Semantic Ranking functionality is also being integrated into Azure Database for PostgreSQL. It can be used to improve vector search result quality by using semantic ranking models to rerank vector search results.</p>"},{"location":"tutorial_vector_search/#vector-search-concepts","title":"Vector Search Concepts","text":"<p>Vector Search is the functionality in modern databases to search by the semantic meaning of data rather than just precice or fuzzy value matching. Vector search is typically used in Generative AI applications, where RAG data is passed to a Large Language Model (LLM) to augment the knowledge base of the model. Vector search is used to identify this RAG data to be passed to the LLM.Vector search works by first \"vectorizing\" your text data, such as a product description or summary or a legal case. To create a vector, you invoke an optimized model in the LLM and pass in your text data to be vectorized. The LLM responds with a vector of floating-point values of n-dimensions that represents the semantic meaning of your text data. A vector is alternatively called an embedding.You then populate this vector data in your database, and index it with a vector index so as to make it searchable.To query your database using vector search, you pass in a vector of floating-point values as a search parameter. You will often have to generate this vector at runtime, by calling the same LLM text embedding model, given the user natural language query. Some databases, including Azure Database for PostgreSQL, support filtered vector search, meaning a search that uses both traditonal WHERE clause logic as well as vector search logic.</p>"},{"location":"tutorial_vector_search/#vector-search-implementation-in-this-reference-application-with-pg_vector","title":"Vector Search Implementation in this Reference Application with pg_vector","text":"<p>This initial implementation of this reference application uses the pgvector open-source PostgreSQL extension. Please visit this linked page as it provides excellent documentation and examples.As described in the Quick Start documentation in this repo, you have to first enable this extension in your Azure Database for PostgreSQL server.You'll need a database table with a column of type vector to store your vectors/embeddings. The DDL for the legal_cases table in this project is shown below. Note the presence of the embedding column of type vector(1536). <pre><code>CREATE TABLE legal_cases (\n  id                   bigserial primary key,\n  name                 VARCHAR(1024),\n  name_abbreviation    VARCHAR(1024),\n  case_url             VARCHAR(1024),\n  decision_date        DATE,\n  court_name           VARCHAR(1024),\n  citation_count       INTEGER,\n  text_data            TEXT,\n  json_data            JSONB,\n  embedding            vector(1536)      \n);\n</code></pre> This vector(1536) column is populated with embeddings produced by the Azure OpenAI text-embedding-ada-002 model. This model produces 1536-dimensional embeddings, meaning it returns an array of 1536 floating-point values. Therefore, the corresponding PostgreSQL column type is vector(1536).To enable the vector column to be queried efficiently, you need to create an index for the column. There are three supported index types:</p> <ul> <li>Inverted File with Flat Compression (IVVFlat)</li> <li>Hierarchical Navigable Small Worlds (HNSW)</li> <li>Disk Approximate Nearest Neighbor (DiskANN)</li> </ul> <p>This reference application uses the IVFFlat index type. The DDL for this index in the legal_cases table is shown below: <pre><code>DROP INDEX IF EXISTS idx_legal_cases_ivfflat_embedding;\nCREATE INDEX idx_legal_cases_ivfflat_embedding\nON     legal_cases\nUSING  ivfflat (embedding vector_cosine_ops)\nWITH  (lists = 50);\n</code></pre> Once the data is populated and the column indexed, you can now execute a vector search vs that column with the \"embedding &lt;-&gt;\" SQL syntax. Please see the web application code in this repository, file python/webapp.py, where the vector search SQL is created in method \"legal_cases_vector_search_sql()\" as shown below: <pre><code>def legal_cases_vector_search_sql(embeddings, limit=10):\n    return (\n        \"\"\"\nselect id, name_abbreviation, to_char(decision_date, 'YYYY-MM-DD')\n from legal_cases\n order by embedding &lt;-&gt; '{}'\n offset 0 limit 10;\n    \"\"\".format(\n            embeddings\n        )\n        .replace(\"\\n\", \" \")\n        .strip()\n    )\n</code></pre> This query returns the legal case name abbreviation and the date of the legal case decision for the 10 legal cases that are most similar to the given embedding value. This is very powerful search functionality.</p>"}]}